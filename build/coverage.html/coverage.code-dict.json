{"/home/travis/build/npmtest/node-npmtest-hyperlinks/test.js":"/* istanbul instrument in package npmtest_hyperlinks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hyperlinks/lib.npmtest_hyperlinks.js":"/* istanbul instrument in package npmtest_hyperlinks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hyperlinks = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hyperlinks = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hyperlinks/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hyperlinks && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hyperlinks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hyperlinks\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hyperlinks.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_hyperlinks.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hyperlinks.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_hyperlinks.__dirname +\n                    '/lib.npmtest_hyperlinks.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hyperlinks/node_modules/hyperlinks/index.js":"const { shell, clipboard } = require('electron');\nconst escapeHTML = require('escape-html');\nconst emailRegex = require('email-regex');\nconst urlRegex = require('./url-regex');\n\nconst emailRe = emailRegex({ exact: true });\n\nconst DEFAULT_CONFIG = {\n  defaultBrowser: true,\n  clickAction: 'open'\n};\n\nexports.getTermProps = function (uid, parentProps, props) {\n  return Object.assign(props, { uid });\n};\n\nexports.decorateTerm = function (Term, { React }) {\n  return class extends React.Component {\n    constructor (props, context) {\n      super(props, context);\n\n      this.onTerminal = this.onTerminal.bind(this);\n      this.config = null\n      this.term = null\n      this.id = 0;\n    }\n\n    onTerminal (term) {\n      if (this.props.onTerminal) {\n        this.props.onTerminal(term);\n      }\n\n      this.config = Object.assign({}, DEFAULT_CONFIG, window.config.getConfig().hyperlinks);\n      this.term = term;\n      const { screen_, onTerminalReady } = term;\n\n      this.overrideScreen(screen_.constructor);\n\n      const self = this;\n      term.onTerminalReady = function () {\n        onTerminalReady.apply(this, arguments);\n\n        const screenNode = term.scrollPort_.getScreenNode();\n        screenNode.addEventListener('click', self.onLinkClick.bind(self));\n        screenNode.addEventListener('mouseover', self.onLinkMouseOver.bind(self));\n        screenNode.addEventListener('mouseout', self.onLinkMouseOut.bind(self));\n      }\n    }\n\n    overrideScreen (Screen) {\n      if (Screen._links) return;\n      Screen._links = true;\n\n      const self = this;\n\n      const { insertString, deleteChars } = Screen.prototype;\n\n      Screen.prototype.insertString = function () {\n        const result = insertString.apply(this, arguments);\n        self.autolink(this);\n        return result;\n      };\n\n      Screen.prototype.deleteChars = function () {\n        const result = deleteChars.apply(this, arguments);\n        self.autolink(this);\n        return result;\n      };\n    }\n\n    autolink (screen) {\n      if ('#text' === screen.cursorNode_.nodeName) {\n        // replace text node to element\n        const cursorNode = document.createElement('span');\n        cursorNode.textContent = screen.cursorNode_.textContent;\n        screen.cursorRowNode_.replaceChild(cursorNode, screen.cursorNode_);\n        screen.cursorNode_ = cursorNode;\n      }\n\n      const rows = [];\n      let lastRow = screen.cursorRowNode_;\n\n      while (true) {\n        rows.unshift(lastRow);\n        if (lastRow.children.length > 1) break;\n        lastRow = lastRow.previousSibling;\n        if (!lastRow || !lastRow.getAttribute('line-overflow')) break;\n      }\n\n      const textContent = rows.map((r) => r.lastChild.textContent).join('');\n      const re = urlRegex();\n      const urls = [];\n      let match;\n\n      while (match = re.exec(textContent)) {\n        const text = match[0];\n        const url = this.getAbsoluteUrl(text);\n        const start = re.lastIndex - text.length;\n        const end = re.lastIndex;\n        const id = this.id++;\n        urls.push({ id, url, start, end });\n      }\n\n      if (!urls.length) return;\n\n      let rowStart = 0;\n      let rowEnd = 0;\n      let urlIndex = 0;\n\n      const htmls = rows.map((row, i) => {\n        rowStart = rowEnd;\n        rowEnd += row.lastChild.textContent.length;\n        let textStart = rowStart;\n\n        let html = '';\n\n        while (urls[urlIndex]) {\n          const { id, url, start, end } = urls[urlIndex];\n\n          if (start > textStart) {\n            const textEnd = start < rowEnd ? start : rowEnd;\n            html += escapeHTML(textContent.slice(textStart, textEnd));\n          }\n\n          if (start < rowEnd) {\n            const urlStart = start > rowStart ? start : rowStart;\n            const urlEnd = end < rowEnd ? end : rowEnd;\n\n            html += `<a href=\"${escapeHTML(url)}\" data-id=\"${id}\">`;\n            html += escapeHTML(textContent.slice(urlStart, urlEnd));\n            html += '</a>';\n          }\n\n          if (end > rowEnd) break;\n\n          textStart = end;\n          urlIndex++;\n        }\n\n        if (!urls[urlIndex]) {\n          html += escapeHTML(textContent.slice(textStart, rowEnd));\n        }\n\n        return html;\n      });\n\n      for (let i = 0, l = rows.length; i < l; i++) {\n        rows[i].lastChild.innerHTML = htmls[i];\n      }\n    }\n\n    getAbsoluteUrl (url) {\n      if (/^[a-z]+:\\/\\//.test(url)) return url;\n      if (0 === url.indexOf('//')) return `http${url}`\n      if (emailRe.test(url)) return `mailto:${url}`;\n      return `http://${url}`;\n    }\n\n    onLinkClick (e) {\n      if ('A' !== e.target.nodeName) return;\n\n      e.preventDefault();\n      const {defaultBrowser, clickAction} = this.config;\n      const url = e.target.href;\n      const isMetaAction = e.metaKey;\n      // If holding down the meta key we'll always open the link\n      if (isMetaAction) {\n        // if there is a custom click action invert the target when Meta Clicking.\n        const target = clickAction !== 'open' ? !defaultBrowser : defaultBrowser;\n        this.getHandler(target, isMetaAction)(url);\n        return;\n      }\n      switch (clickAction) {\n        case 'ignore':\n          break;\n        case 'copy':\n          this.copyToClipBoard(url);\n          break;\n        default: // 'open'\n          this.getHandler(defaultBrowser, isMetaAction)(url);\n\n      }\n    }\n    /**\n     * Determines whether to open in the browser or Hyper\n     * @param  {Boolean} defaultBrowser if clicked links open in browser\n     * @param  {Boolean} isMeta If modifier key is pressed\n     * @return {Function} Handler for the link\n     */\n    getHandler(defaultBrowser, isMeta) {\n      if (defaultBrowser === isMeta) { return this.handleInHyper.bind(this); }\n      return this.handleInBrowser.bind(this);\n    }\n    /**\n     * opens a clicked link in the hyper terminal\n     * @param  {String} url clicked url\n     */\n    handleInHyper(url) {\n      store.dispatch({\n        type: 'SESSION_URL_SET',\n        uid: this.props.uid,\n        url: url\n      });\n    }\n    /**\n     * opens a clicked link in the user's default browser\n     * @param  {String} url clicked url\n     */\n    handleInBrowser(url) {\n      shell.openExternal(url);\n    }\n    /**\n     * copies a string to the clipboard\n     * @param  {String} string to copy\n     */\n    copyToClipBoard(text) {\n      clipboard.writeText(text);\n    }\n\n    onLinkMouseOver (e) {\n      if ('A' !== e.target.nodeName) return;\n\n      const { id } = e.target.dataset;\n      for (const a of this.getAnchors(id)) {\n        a.classList.add('hover');\n      }\n    }\n\n    onLinkMouseOut (e) {\n      if ('A' !== e.target.nodeName) return;\n\n      const { id } = e.target.dataset;\n      for (const a of this.getAnchors(id)) {\n        a.classList.remove('hover');\n      }\n    }\n\n    getAnchors (id) {\n      const screenNode = this.term.scrollPort_.getScreenNode();\n      return screenNode.querySelectorAll(`a[data-id=\"${id}\"]`);\n    }\n\n    render () {\n      const props = Object.assign({}, this.props, {\n        onTerminal: this.onTerminal,\n        customCSS: styles + (this.props.customCSS || '')\n      });\n      return React.createElement(Term, props);\n    }\n  };\n};\n\nconst styles = `\n  x-screen a {\n    color: #ff2e88;\n    text-decoration: none;\n  }\n\n  x-screen a.hover {\n    text-decoration: underline;\n  }\n`;\n","/home/travis/build/npmtest/node-npmtest-hyperlinks/node_modules/hyperlinks/url-regex.js":"const ipRegex = require('ip-regex');\n\n// based on https://github.com/kevva/url-regex\nmodule.exports = function () {\n  const protocol = '(?:[a-z-]+://)';\n  const auth = '(?:\\\\S+(?::\\\\S*)?@)?';\n  const ip = ipRegex.v4().source;\n  const host = '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)';\n  const domain = '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*';\n  const tld = '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))';\n  const port = '(?::\\\\d{2,5})?';\n  const path = '(?:[/?#][^\\\\s\"\\']*)?';\n  const regex = [\n    '(?:' + protocol + '|www\\\\.)' + auth, '(?:localhost|' + ip + '|' + host + domain + tld + ')',\n    port, path\n  ].join('');\n\n  return new RegExp(regex, 'ig');\n};\n"}